//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : create_scanner.sm
//

#include "create_scanner.h"
#include "create_scanner_sm.h"

using namespace statemap;

// Static class declarations.
CreateMap_start CreateMap::start("CreateMap::start", 0);
CreateMap_c_state CreateMap::c_state("CreateMap::c_state", 1);
CreateMap_r_state CreateMap::r_state("CreateMap::r_state", 2);
CreateMap_e_state CreateMap::e_state("CreateMap::e_state", 3);
CreateMap_a_state CreateMap::a_state("CreateMap::a_state", 4);
CreateMap_t_state CreateMap::t_state("CreateMap::t_state", 5);
CreateMap_error CreateMap::error("CreateMap::error", 6);

void create_scannerState::change_state(create_scannerContext& context, const char& c)
{
    Default(context);
}

void create_scannerState::Default(create_scannerContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void CreateMap_Default::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::Default"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "BEFORE EXIT     : CreateMap::Default::Exit(context)"
            << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "AFTER EXIT      : CreateMap::Default::Exit(context)"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: CreateMap::Default::change_state(const char& c)"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : CreateMap::Default::change_state(const char& c)"
            << std::endl;
    }

    context.setState(CreateMap::error);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "BEFORE ENTRY    : CreateMap::error::Entry(context)"
            << std::endl;
    }
    context.getState().Entry(context);

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "AFTER ENTRY     : CreateMap::error::Entry(context)"
            << std::endl;
    }



}

void CreateMap_start::Entry(create_scannerContext& context)

{
    create_scanner& ctxt = context.getOwner();

    ctxt.invalidate();
}

void CreateMap_start::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::start"
                << std::endl;
    }

    if (c == 'c' || c == 'C')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : CreateMap::start::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : CreateMap::start::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: CreateMap::start::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : CreateMap::start::change_state(const char& c)"
                << std::endl;
        }

        context.setState(CreateMap::c_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : CreateMap::c_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : CreateMap::c_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         CreateMap_Default::change_state(context, c);
    }


}

void CreateMap_c_state::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::c_state"
                << std::endl;
    }

    if (c == 'r' || c == 'R')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : CreateMap::c_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : CreateMap::c_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: CreateMap::c_state::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : CreateMap::c_state::change_state(const char& c)"
                << std::endl;
        }

        context.setState(CreateMap::r_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : CreateMap::r_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : CreateMap::r_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         CreateMap_Default::change_state(context, c);
    }


}

void CreateMap_r_state::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::r_state"
                << std::endl;
    }

    if (c == 'e' || c == 'E')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : CreateMap::r_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : CreateMap::r_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: CreateMap::r_state::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : CreateMap::r_state::change_state(const char& c)"
                << std::endl;
        }

        context.setState(CreateMap::e_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : CreateMap::e_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : CreateMap::e_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         CreateMap_Default::change_state(context, c);
    }


}

void CreateMap_e_state::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::e_state"
                << std::endl;
    }

    if (c == 'a' || c == 'A')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : CreateMap::e_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : CreateMap::e_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: CreateMap::e_state::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : CreateMap::e_state::change_state(const char& c)"
                << std::endl;
        }

        context.setState(CreateMap::a_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : CreateMap::a_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : CreateMap::a_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         CreateMap_Default::change_state(context, c);
    }


}

void CreateMap_a_state::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::a_state"
                << std::endl;
    }

    if (c == 't' || c == 'T')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : CreateMap::a_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : CreateMap::a_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: CreateMap::a_state::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : CreateMap::a_state::change_state(const char& c)"
                << std::endl;
        }

        context.setState(CreateMap::t_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : CreateMap::t_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : CreateMap::t_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         CreateMap_Default::change_state(context, c);
    }


}

void CreateMap_t_state::change_state(create_scannerContext& context, const char& c)
{
    create_scanner& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::t_state"
                << std::endl;
    }

    if (c == 'e' || c == 'E')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : CreateMap::t_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : CreateMap::t_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: CreateMap::t_state::change_state(const char& c)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.validate();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : CreateMap::t_state::change_state(const char& c)"
                    << std::endl;
            }

            context.setState(CreateMap::e_state);
        }
        catch (...)
        {
            context.setState(CreateMap::e_state);
            throw;
        }
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : CreateMap::e_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : CreateMap::e_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         CreateMap_Default::change_state(context, c);
    }


}

void CreateMap_error::Entry(create_scannerContext& context)

{
    create_scanner& ctxt = context.getOwner();

    ctxt.invalidate();
}

void CreateMap_error::change_state(create_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : CreateMap::error"
                << std::endl;
    }



}

//
// Local variables:
//  buffer-read-only: t
// End:
//
