//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : join_scanner.sm
//

#ifndef JOIN_SCANNER_SM_H
#define JOIN_SCANNER_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class JoinMap;
class JoinMap_start;
class JoinMap_j_state;
class JoinMap_o_state;
class JoinMap_i_state;
class JoinMap_n_state;
class JoinMap_error;
class JoinMap_Default;
class join_scannerState;
class join_scannerContext;
class join_scanner;

class join_scannerState :
    public statemap::State
{
public:

    join_scannerState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(join_scannerContext&) {};
    virtual void Exit(join_scannerContext&) {};

    virtual void change_state(join_scannerContext& context, const char& c);

protected:

    virtual void Default(join_scannerContext& context);
};

class JoinMap
{
public:

    static JoinMap_start start;
    static JoinMap_j_state j_state;
    static JoinMap_o_state o_state;
    static JoinMap_i_state i_state;
    static JoinMap_n_state n_state;
    static JoinMap_error error;
};

class JoinMap_Default :
    public join_scannerState
{
public:

    JoinMap_Default(const char * const name, const int stateId)
    : join_scannerState(name, stateId)
    {};

    virtual void change_state(join_scannerContext& context, const char& c);
};

class JoinMap_start :
    public JoinMap_Default
{
public:
    JoinMap_start(const char * const name, const int stateId)
    : JoinMap_Default(name, stateId)
    {};

    virtual void Entry(join_scannerContext&);
    virtual void change_state(join_scannerContext& context, const char& c);
};

class JoinMap_j_state :
    public JoinMap_Default
{
public:
    JoinMap_j_state(const char * const name, const int stateId)
    : JoinMap_Default(name, stateId)
    {};

    virtual void change_state(join_scannerContext& context, const char& c);
};

class JoinMap_o_state :
    public JoinMap_Default
{
public:
    JoinMap_o_state(const char * const name, const int stateId)
    : JoinMap_Default(name, stateId)
    {};

    virtual void change_state(join_scannerContext& context, const char& c);
};

class JoinMap_i_state :
    public JoinMap_Default
{
public:
    JoinMap_i_state(const char * const name, const int stateId)
    : JoinMap_Default(name, stateId)
    {};

    virtual void change_state(join_scannerContext& context, const char& c);
};

class JoinMap_n_state :
    public JoinMap_Default
{
public:
    JoinMap_n_state(const char * const name, const int stateId)
    : JoinMap_Default(name, stateId)
    {};

};

class JoinMap_error :
    public JoinMap_Default
{
public:
    JoinMap_error(const char * const name, const int stateId)
    : JoinMap_Default(name, stateId)
    {};

    virtual void Entry(join_scannerContext&);
    virtual void change_state(join_scannerContext& context, const char& c);
};

class join_scannerContext :
    public statemap::FSMContext
{
public:

    explicit join_scannerContext(join_scanner& owner)
    : FSMContext(JoinMap::start),
      _owner(owner)
    {};

    join_scannerContext(join_scanner& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline join_scanner& getOwner()
    {
        return (_owner);
    };

    inline join_scannerState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<join_scannerState&>(*_state);
    };

    inline void change_state(const char& c)
    {
        setTransition("change_state");
        getState().change_state(*this, c);
        setTransition(NULL);
    };

private:
    join_scanner& _owner;
};


#endif // JOIN_SCANNER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
