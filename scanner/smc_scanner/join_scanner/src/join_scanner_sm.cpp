//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : join_scanner.sm
//

#include "join_scanner.h"
#include "join_scanner_sm.h"

using namespace statemap;

// Static class declarations.
JoinMap_start JoinMap::start("JoinMap::start", 0);
JoinMap_j_state JoinMap::j_state("JoinMap::j_state", 1);
JoinMap_o_state JoinMap::o_state("JoinMap::o_state", 2);
JoinMap_i_state JoinMap::i_state("JoinMap::i_state", 3);
JoinMap_n_state JoinMap::n_state("JoinMap::n_state", 4);
JoinMap_error JoinMap::error("JoinMap::error", 5);

void join_scannerState::change_state(join_scannerContext& context, const char& c)
{
    Default(context);
}

void join_scannerState::Default(join_scannerContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void JoinMap_Default::change_state(join_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : JoinMap::Default"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "BEFORE EXIT     : JoinMap::Default::Exit(context)"
            << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "AFTER EXIT      : JoinMap::Default::Exit(context)"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: JoinMap::Default::change_state(const char& c)"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : JoinMap::Default::change_state(const char& c)"
            << std::endl;
    }

    context.setState(JoinMap::error);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "BEFORE ENTRY    : JoinMap::error::Entry(context)"
            << std::endl;
    }
    context.getState().Entry(context);

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "AFTER ENTRY     : JoinMap::error::Entry(context)"
            << std::endl;
    }



}

void JoinMap_start::Entry(join_scannerContext& context)

{
    join_scanner& ctxt = context.getOwner();

    ctxt.invalidate();
}

void JoinMap_start::change_state(join_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : JoinMap::start"
                << std::endl;
    }

    if (c == 'j' || c == 'J')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : JoinMap::start::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : JoinMap::start::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: JoinMap::start::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : JoinMap::start::change_state(const char& c)"
                << std::endl;
        }

        context.setState(JoinMap::j_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : JoinMap::j_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : JoinMap::j_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         JoinMap_Default::change_state(context, c);
    }


}

void JoinMap_j_state::change_state(join_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : JoinMap::j_state"
                << std::endl;
    }

    if (c == 'o' || c == 'O')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : JoinMap::j_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : JoinMap::j_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: JoinMap::j_state::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : JoinMap::j_state::change_state(const char& c)"
                << std::endl;
        }

        context.setState(JoinMap::o_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : JoinMap::o_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : JoinMap::o_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         JoinMap_Default::change_state(context, c);
    }


}

void JoinMap_o_state::change_state(join_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : JoinMap::o_state"
                << std::endl;
    }

    if (c == 'i' || c == 'I')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : JoinMap::o_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : JoinMap::o_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: JoinMap::o_state::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : JoinMap::o_state::change_state(const char& c)"
                << std::endl;
        }

        context.setState(JoinMap::i_state);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : JoinMap::i_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : JoinMap::i_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         JoinMap_Default::change_state(context, c);
    }


}

void JoinMap_i_state::change_state(join_scannerContext& context, const char& c)
{
    join_scanner& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : JoinMap::i_state"
                << std::endl;
    }

    if (c == 'n' || c == 'N')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : JoinMap::i_state::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : JoinMap::i_state::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: JoinMap::i_state::change_state(const char& c)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.validate();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : JoinMap::i_state::change_state(const char& c)"
                    << std::endl;
            }

            context.setState(JoinMap::n_state);
        }
        catch (...)
        {
            context.setState(JoinMap::n_state);
            throw;
        }
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : JoinMap::n_state::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : JoinMap::n_state::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         JoinMap_Default::change_state(context, c);
    }


}

void JoinMap_error::Entry(join_scannerContext& context)

{
    join_scanner& ctxt = context.getOwner();

    ctxt.invalidate();
}

void JoinMap_error::change_state(join_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : JoinMap::error"
                << std::endl;
    }



}

//
// Local variables:
//  buffer-read-only: t
// End:
//
