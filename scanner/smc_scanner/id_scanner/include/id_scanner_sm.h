//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : id_scanner.sm
//

#ifndef ID_SCANNER_SM_H
#define ID_SCANNER_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class IdMap;
class IdMap_start;
class IdMap_valid_id;
class IdMap_error;
class IdMap_Default;
class id_scannerState;
class id_scannerContext;
class id_scanner;

class id_scannerState :
    public statemap::State
{
public:

    id_scannerState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(id_scannerContext&) {};
    virtual void Exit(id_scannerContext&) {};

    virtual void change_state(id_scannerContext& context, const char& c);

protected:

    virtual void Default(id_scannerContext& context);
};

class IdMap
{
public:

    static IdMap_start start;
    static IdMap_valid_id valid_id;
    static IdMap_error error;
};

class IdMap_Default :
    public id_scannerState
{
public:

    IdMap_Default(const char * const name, const int stateId)
    : id_scannerState(name, stateId)
    {};

    virtual void change_state(id_scannerContext& context, const char& c);
};

class IdMap_start :
    public IdMap_Default
{
public:
    IdMap_start(const char * const name, const int stateId)
    : IdMap_Default(name, stateId)
    {};

    virtual void change_state(id_scannerContext& context, const char& c);
};

class IdMap_valid_id :
    public IdMap_Default
{
public:
    IdMap_valid_id(const char * const name, const int stateId)
    : IdMap_Default(name, stateId)
    {};

    virtual void change_state(id_scannerContext& context, const char& c);
};

class IdMap_error :
    public IdMap_Default
{
public:
    IdMap_error(const char * const name, const int stateId)
    : IdMap_Default(name, stateId)
    {};

    virtual void Entry(id_scannerContext&);
    virtual void change_state(id_scannerContext& context, const char& c);
};

class id_scannerContext :
    public statemap::FSMContext
{
public:

    explicit id_scannerContext(id_scanner& owner)
    : FSMContext(IdMap::start),
      _owner(owner)
    {};

    id_scannerContext(id_scanner& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline id_scanner& getOwner()
    {
        return (_owner);
    };

    inline id_scannerState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<id_scannerState&>(*_state);
    };

    inline void change_state(const char& c)
    {
        setTransition("change_state");
        getState().change_state(*this, c);
        setTransition(NULL);
    };

private:
    id_scanner& _owner;
};


#endif // ID_SCANNER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
