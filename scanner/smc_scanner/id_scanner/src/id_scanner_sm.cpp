//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : id_scanner.sm
//

#include "id_scanner.h"
#include "id_scanner_sm.h"

using namespace statemap;

// Static class declarations.
IdMap_start IdMap::start("IdMap::start", 0);
IdMap_valid_id IdMap::valid_id("IdMap::valid_id", 1);
IdMap_error IdMap::error("IdMap::error", 2);

void id_scannerState::change_state(id_scannerContext& context, const char& c)
{
    Default(context);
}

void id_scannerState::Default(id_scannerContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void IdMap_Default::change_state(id_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : IdMap::Default"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "BEFORE EXIT     : IdMap::Default::Exit(context)"
            << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "AFTER EXIT      : IdMap::Default::Exit(context)"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: IdMap::Default::change_state(const char& c)"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : IdMap::Default::change_state(const char& c)"
            << std::endl;
    }

    context.setState(IdMap::error);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "BEFORE ENTRY    : IdMap::error::Entry(context)"
            << std::endl;
    }
    context.getState().Entry(context);

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "AFTER ENTRY     : IdMap::error::Entry(context)"
            << std::endl;
    }



}

void IdMap_start::change_state(id_scannerContext& context, const char& c)
{
    id_scanner& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : IdMap::start"
                << std::endl;
    }

    if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_' || c == '.')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE EXIT     : IdMap::start::Exit(context)"
                << std::endl;
        }

        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER EXIT      : IdMap::start::Exit(context)"
                    << std::endl;
        }

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: IdMap::start::change_state(const char& c)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.validate();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : IdMap::start::change_state(const char& c)"
                    << std::endl;
            }

            context.setState(IdMap::valid_id);
        }
        catch (...)
        {
            context.setState(IdMap::valid_id);
            throw;
        }
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "BEFORE ENTRY    : IdMap::valid_id::Entry(context)"
                << std::endl;
        }
        context.getState().Entry(context);

        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "AFTER ENTRY     : IdMap::valid_id::Entry(context)"
                << std::endl;
        }

    }
    else
    {
         IdMap_Default::change_state(context, c);
    }


}

void IdMap_valid_id::change_state(id_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : IdMap::valid_id"
                << std::endl;
    }

    if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_' || c == '.' || c >= '0' && c <= '9')
    {
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: IdMap::valid_id::change_state(const char& c)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : IdMap::valid_id::change_state(const char& c)"
                << std::endl;
        }

    }
    else
    {
         IdMap_Default::change_state(context, c);
    }


}

void IdMap_error::Entry(id_scannerContext& context)

{
    id_scanner& ctxt = context.getOwner();

    ctxt.invalidate();
}

void IdMap_error::change_state(id_scannerContext& context, const char& c)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : IdMap::error"
                << std::endl;
    }



}

//
// Local variables:
//  buffer-read-only: t
// End:
//
